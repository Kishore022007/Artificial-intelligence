def dfs_recursive(graph, node, visited=None):
    """Depth-First Search (recursive)."""
    if visited is None:
        visited = set()
    visited.add(node)
    print(node, end=" ")

    for neighbor in graph.get(node, []):
        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)


def dfs_stack(graph, start):
    """Depth-First Search (using explicit stack)."""
    visited = set()
    stack = [start]
    order = []

    while stack:
        node = stack.pop()
        if node not in visited:
            visited.add(node)
            order.append(node)
            # Add neighbors in reverse to maintain left-to-right order
            stack.extend(reversed(graph.get(node, [])))
    return order


# Example usage
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': ['F'],
        'F': []
    }

    print("DFS Recursive starting from A:")
    dfs_recursive(graph, 'A')
    print("\n")

    print("DFS using stack starting from A:")
    print(dfs_stack(graph, 'A'))
