import heapq

# Define goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the blank tile

# Possible moves (row, col)
moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]


def manhattan_distance(state):
    """Heuristic: Manhattan distance between current state and goal state."""
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance


def get_blank(state):
    """Find blank (0) position in the puzzle."""
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def generate_neighbors(state):
    """Generate possible states from current state."""
    neighbors = []
    x, y = get_blank(state)
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors


def state_to_tuple(state):
    """Convert state list to tuple for hashing."""
    return tuple(tuple(row) for row in state)


def a_star(start_state):
    """Solve 8 puzzle using A* algorithm."""
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while pq:
        f, g, current, path = heapq.heappop(pq)

        if current == goal_state:
            return path + [current]

        visited.add(state_to_tuple(current))

        for neighbor in generate_neighbors(current):
            if state_to_tuple(neighbor) not in visited:
                heapq.heappush(
                    pq, (g + 1 + manhattan_distance(neighbor), g + 1, neighbor, path + [current])
                )
    return None


# Example usage:
if __name__ == "__main__":
    start = [[1, 2, 3],
             [4, 0, 6],
             [7, 5, 8]]  # Initial state

    solution = a_star(start)

    if solution:
        print("Solution found in", len(solution) - 1, "moves:")
        for step in solution:
            for row in step:
                print(row)
            print()
    else:
        print("No solution exists!")
