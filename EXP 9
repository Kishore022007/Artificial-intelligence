from itertools import permutations

# Function to calculate the total distance of a given path
def calculate_path_cost(graph, path):
    cost = 0
    for i in range(len(path) - 1):
        cost += graph[path[i]][path[i + 1]]
    # Return to the starting city
    cost += graph[path[-1]][path[0]]
    return cost

# Function to solve the TSP using brute-force
def travelling_salesman(graph, start=0):
    vertices = list(range(len(graph)))
    vertices.remove(start)
    min_path = None
    min_cost = float('inf')

    # Try every possible path (permutation)
    for perm in permutations(vertices):
        current_path = [start] + list(perm)
        current_cost = calculate_path_cost(graph, current_path)
        if current_cost < min_cost:
            min_cost = current_cost
            min_path = current_path

    # Return to starting city to complete the cycle
    min_path.append(start)
    return min_path, min_cost

# Example graph represented as an adjacency matrix
graph = [
    [0, 29, 20, 21],
    [29, 0, 15, 17],
    [20, 15, 0, 28],
    [21, 17, 28, 0]
]

# Run the TSP algorithm
path, cost = travelling_salesman(graph)

print("Optimal Path:", path)
print("Minimum Cost:", cost)
